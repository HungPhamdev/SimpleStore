@page "/login"
@using System.Web;
@using System.Net;
@using ASM.Share.Models.ViewModels;
@using System.ComponentModel.DataAnnotations;
@layout WebLayout;
@inject NavigationManager navigation
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionnStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="card card-login mx-auto text-center bg-dark">
        <div class="card-header mx-auto bg-dark">
            <span> <img src="/images/simplestore.png" class="float-left w-25" alt="Logo"> Simple Quán</span><br />
            <span class="logo_title mt-5 h3 text-warning"> Đăng nhập Simple Quán</span>
        </div>
        <div class="card-body">
            <div class="text-danger" asp-validation-summary="All"></div>
            <input type="hidden" asp-for="ReturnUrl" />
            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                </div>
                <input type="text" id="username" placeholder="Email" @bind="@email" class="form-control" />
            </div>

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-key"></i></span>
                </div>
                <input type="password" placeholder="Mật khẩu" @bind="@password" @onkeypress="Enter" class="form-control" />
            </div>

            <div class="form-group">
                <button name="btn" type="submit" class="btn btn-danger text-white float-right login_btn mb-2 rounded-circles" @onclick="CheckLogin"><i class="fas fa-sign-in-alt"></i> Đăng nhập</button>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-3 mb-0">@((MarkupString)error)</div>
        }
    </div>
</div>

@*<div class="col-md-4 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Đăng nhập</h4>
        <div class="card-body">
            <div class="form-group">
                <input type="text" id="username" placeholder="Email" @bind="@email" class="form-control" />
            </div>
            <div class="form-group">
                <input type="password" placeholder="Mật khẩu" @bind="@password" @onkeypress="Enter" class="form-control" />
            </div>
            <button class="ml-md-auto btn btn-primary" @onclick="CheckLogin"><i class="fas fa-sign-in-alt"></i> Đăng nhập</button>
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@((MarkupString)error)</div>
            }                   
        </div>
    </div>
</div>*@

@code {
    private bool loading;
    private string error;

    string email = "";
    string password = "";

    private string name;
    protected override void OnInitialized() { }

    private string Encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (password != "")
            {
                CheckLogin();
            }
        }
    }

    private async Task CheckLogin()
    {
        error = "";
        if (email == "")
        {
            error = "Bạn cần nhập email!";
        }
        if (password == "")
        {
            error += (error == "" ? "" : "<br/>") + "Bạn cần nhập mật khẩu!";
        }
        if (error == "")
        {
            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            using(var client = new HttpClient())
            {
                ViewWebLogin viewWebLogin = new ViewWebLogin() { Email = email, Password = password };
                client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
                //client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                StringContent content = new StringContent(JsonConvert.SerializeObject(viewWebLogin), System.Text.Encoding.UTF8, "application/json");
                HttpResponseMessage respone = await client.PostAsync(apiUrl + "Token", content);
                if (respone.StatusCode != HttpStatusCode.OK)
                {
                    error += (error == "" ? "" : "<br/>") + "Lỗi khi gọi API!";
                    // Xử lý lỗi
                    //return Content(respone.ToString());
                }
                else
                {
                    string apiResponse = await respone.Content.ReadAsStringAsync();

                    var viewToken = Newtonsoft.Json.JsonConvert.DeserializeObject<ViewToken>(apiResponse);
                    var accessToken = viewToken.Token;
                    sessionnStorage.SetItem("KhachhangId", viewToken.KhachhangId);
                    sessionnStorage.SetItem("Email", email);
                    sessionnStorage.SetItem("AccessToken", accessToken);

                    await JSRuntime.InvokeAsync<object>("refreshMenu", new { email = email });
                    //await JSRuntime.InvokeAsync<object>("CalledJSFunctionWithOarameter", "Jignesh Trivedi");

                    navigation.NavigateTo("/", true);
                }
            }
        }
    }
}
